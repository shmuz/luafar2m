.Language=English,English
.PluginContents=Multiple directories creation

@Contents
$ #Multiple directories creation#
    #About#
    ─────
    This command allows to create multiple directories in one call. Directory
names in the list separated with '#;#'. It is possible to specify more complex
templates also, described below.


    #Templates#
    ─────────
    Templates can contain ~fixed part~@Fixed@, ~list~@List@, ~range~@Range@.
Template can also create chains of subdirectories, if backslash ('\') used.

    #Note:# It is possible to disable special meaning of reserved characters
by enclosing directory name in double quotes.


 #Examples of templates with lists and ranges:#
 ────────────────────────────────────────────
    Disk{1-100}
    Disk{001-100}
    USER{{1-5};9;12;{15-20}}.DATA
    hex{1-1FF}
    {00-ff}
    {a-z}
    {A-Z};{a-z}
    {Beta;Release}\Disk{1-20}

 #See also:#
 ─────────
    ~Fixed part~@Fixed@
    ~List~@List@
    ~Range~@Range@
    ~Aliases~@Aliases@


    #Installation#
    ────────────
    Copy all supplied files into directory #%FARPROFILE%\Macros\scripts\MkDir#
(Far3) or #~~/.config/far2m/Macros/scripts/MkDir# (Far2m)
and restart Far. Press the key combination assigned to the macro.


@Fixed
$ #Fixed part#
    Any text not enclosed in curly brackets '{' and '}' is a fixed part.
Fixed part will be copied into generated directory name without changes.
If a fixed part contains at least one of the characters #{#, #}#, #;#
then it must be put into double quotes, e.g. "abc{}def;123".

@List
$ #List#
    One or more lists can be used in templates. 'List' here is the list of
directory name parts, delimited with ';' and enclosed in '{' and '}'.
Each name part from a list will be substituted in the position of the list
in template. You may use as many lists, as you need, every list should be
in its own brackets.


 #Examples of lists:#
 ──────────────────
    {1;2;3}
    {Beta;Release}

 #Examples of templates with both fixed part and list:#
 ────────────────────────────────────────────────────
    DISK{1;2;3}.DSK
         - creates directories DISK1.DSK, DISK2.DSK and DISK3.DSK.
    {Beta;Release}\{Disk1;Disk2;Disk3}
         - creates Beta and Release directories, in each of which
           it creates subdirectories Disk1, Disk2 and Disk3.

@Range
$ #Range#
    You can also use lists with ranges. A range consists of two limit
values, separated by '-'. A range must be inside braces, e.g. {12-35}.

    Three range types supported:
 - #decimal numbers# (if only digits 0..9 used);
 - #hexadecimal numbers# (if only digits 0..9 and letters A..F used);
 - #character# (if every limit value is a single character).

    Numeric ranges support formatting to field width based on the first
limit value. Every generated number is padded with '0' to this width. So
it is possible to use ranges like {001-1000} to produce directory names
"001", "002" ... "999", "1000".

    For hexadecimal ranges capitalization (a-f or A-F) in generated names
depends of letters used in a range limit values.


 #Examples of lists with ranges:#
 ──────────────────────────────
    {1-5}
    {1-10}
    {01-10}
    {1-5};9;12;{15-20}
    {1-1FF}
    {00-ff}
    {a-z}
    {A-Z};{a-z}
    {Beta;Release}\Disk{1-20}


    #Note:# please use caution using complex templates. You could produce many
directories in case of an error in template.

@Aliases
$ #Aliases#
 #General info#
 ────────────
 #•#  Aliases are loaded from the file #mkdir.alias# if it exists.
 #•#  This is a Lua file despite its extension.
 #•#  Aliases are the global variables defined in this file.
 #•#  Alias names are case insensitive (foo and FOO is the same alias).
 #•#  The value for an alias may be a string, a table or a function.
    #•#  functions: the first returned value is used depending on its type as described below
    #•#  tables are converted to ~lists~@list@, e.g. {"foo","bar"} becomes {foo;bar}
    #•#  other types are converted to strings
 #•#  In the input dialog aliases must be within angle brackets, e.g. <journey>


 #Examples:#
 ─────────
 journey = "{Documents;Photo;Video;Music}"
 months  = "{January;February;March;April;May;June;July;August;September;October;November;December}"
 месяцы  = "{Январь;Февраль;Март;Апрель;Май;Июнь;Июль;Август;Сентябрь;Октябрь;Ноябрь;Декабрь}"
 date    = os.date("%Y-%m-%d__%H-%M-%S")
 fruit   = { "apple", "pear", "cherry" }
 test    = function() local t={}; for k=10,100,7 do table.insert(t,k) end; return t; end


 ~Contents~@Contents@
